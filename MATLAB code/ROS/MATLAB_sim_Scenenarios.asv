% Roundabout simulation - MATLAB
% Adding scenarios to the MPC 

yalmip('clear')
clear all

h = 0.2;       % Simulation sample time (s)
A0 = [1 0 h 0;
      0 1 0 h;
      0 0 1 0;
      0 0 0 1];
B0 = [h^2/2 0;
      0 h^2/2;
      h 0;
      0 h];
nx = 4; % Number of states
nu = 2; % Number of inputs
nd = 2; % Number of drones
T = 600; % Number of time steps

m = 59; % Number of scenarios
r1 = 0.5;     % Drone proximity limits
r2 = 0.5;
gamma = 0.9;
a_lim = 0.1;  % acceleration limit m/s^2

% 4 Drones
X = zeros(nx, nd, T+1);  % MegaState matrix (current states, drone index, Time step)

for s = 1:m
    A{s} = A0;
    B{s} = B0;
end

% Initialize states
X(:,1,1) = [-5;0.1;0;0];
X(:,2,1) = [5;-0.1;0;0];
X(:,3,1) = [1;0;0;0];
X(:,4,1) = [-1;0;0;0];

% Target destinations
targets = [5 0.1 0 0;
           -5 -0.1 0 0;
           -1 0 0 0;
           1 0 0 0];
targets = targets';




%% MPC data 
Q = 5*eye(nx);
R = 1*eye(nu);
eta = 0.1;
N = 3;  % MPC Horizon

%% Define the mean and standard deviation for disturbance
mu = 0;
sigma = 1; 
rng(1234); % Setting the seed

for j = 1:nd
    Bd{j} = 5/1000*(-1)^(j+1)*[eye(2);eye(2)];
end

for s = 1:m
    for d = 1:nd
        for n = 1:N 
            dis(:,s,n,d) =  mu + sigma * randn(2, 1);
        end
    end
end

% Getting the maximum from all scenarios 
for d = 1:nd
        for n = 1:N
            disturbance(1,n,d) = max(dis(1,:,n,d));
            disturbance(2,n,d) = max(dis(2,:,n,d));
        end
end



combinations = zeros(nd, nd-1);
for i = 1:nd
    temp = 1:nd;         % Create a temporary array with all drone indices
    temp(i) = [];        % Remove the i-th drone
    combinations(i, :) = temp;  % Store the result
end
[lx,ly] = size(combinations);

r_roundabout = 2.6;
D = 1;


%% Simulation - Main
for t = 1:T
    for d = 1:nd
        X_mpc = X(:,d,t);       % Getting the current state
        for s = 1:m 
            state_main_MPC{s} = X(:,d,t);
        end

        
        QN = idare(A0, B0, Q, R, [], []);
        u = sdpvar(repmat(nu,1,N),repmat(1,1,N));
        constraints = [];
        objective = 0;
%% MPC and CBF
        for s = 1:m
            for k = 1:N
                objective = objective + (state_main_MPC{s}-targets(:,d))'*Q*(state_main_MPC{s}-targets(:,d))+u{k}'*R*u{k};
                state_main_MPC{s} = A0*state_main_MPC{s} + B0* u{k} + Bd{d}*dis(:,s,k,d);
            end
            objective = objective + eta*(state_main_MPC{s}-targets(:,d))'*QN*(state_main_MPC{s}-targets(:,d)); 
        end
        for c = 1:ly
            for k = 1:N 
                hk = (X_mpc(1,1) - X(1,combinations(d,c),t))^2/r1^2 + (X_mpc(2,1) - X(2,combinations(d,c),t))^2/r2^2 - 1;     % Barrier function at k
                hkk = (X_mpc(1)^2 + X_mpc(2)^2) - r_roundabout^2 - (D/2)^2; % Barrier for roundabout
                X_mpc = A0*X_mpc+B0*u{k}+Bd{d}*disturbance(:,k,d);
                constraints = [constraints, -a_lim <= u{k} <= a_lim];
                hk1 = (X_mpc(1,1) - X(1,combinations(d,c),t))^2/r1^2 + (X_mpc(2,1) - X(2,combinations(d,c),t))^2/r2^2 - 1;     % Barrier function at k+1
                hkk1 = (X_mpc(1)^2 + X_mpc(2)^2)-  r_roundabout^2  - (D/2)^2; % Barrier for roundabout
                constraints = [constraints, 0 <= hk1-hk+gamma*hk];
                constraints = [constraints, -0.2<=X_mpc(3)<=0.2, -0.2<=X_mpc(4)<=0.2];
                if abs(X(2,d,t))<D/2 && abs(X(1,d,t)) > r_roundabout + 0.75 
                    constraints = [constraints, -D/2<=X_mpc(2)<=D/2];
                else
                    constraints = [constraints, 0 <= hkk1 - hkk+ gamma*hkk];
                end
            end

                
        end
        
        
        
    %% Simulation
    options = sdpsettings('verbose', 0,'cache', -1,'solver','ipopt');
    diagnostics = optimize(constraints,objective,options);
    if diagnostics.problem == 0
     disp('Solver thinks it is feasible')
    elseif diagnostics.problem == 1
     disp('Solver thinks it is infeasible')
    else
     disp('Something else happened')
    end
    
    U = value(u(:,1));
    U_rec{d}(:,t) = value(U{1});
    X(:,d,t+1) = A0*X(:,d,t)+B0*U{1} + Bd{d}*( mu + sigma * randn(2, 1));
    t
    end
end







%% Plotting Trajectories
figure;
hold on;
% load('States_history/X2.mat', 'X')
% Plot the trajectory of each drone with lines
for drone_idx = 1:nd
    % Extract the x and y positions of the drone over time
    x_positions = squeeze(X(1,  drone_idx, :));  % x positions
    y_positions = squeeze(X(2,  drone_idx, :));  % y positions
    
    % Plot the trajectory with lines
    plot(x_positions, y_positions, '--', 'LineWidth', 2,'DisplayName', ['Vehicle' num2str(drone_idx) ' Sim']);
end

% Plot initial and final positions with distinct markers
for drone_idx = 1:nd
    % Extract the initial and final positions
    initial_x = X(1,  drone_idx, 1);
    initial_y = X(2,  drone_idx, 1);
    final_x = X(1,  drone_idx, length(X(1,1,:)));
    final_y = X(2,  drone_idx, length(X(1,1,:)));
    
    % Plot the initial position
    plot(initial_x, initial_y, 's', 'MarkerSize', 15, 'DisplayName', ['Initial Position Vehicle ' num2str(drone_idx)]);
    
    % Plot the final position
    plot(final_x, final_y, 'd', 'MarkerSize', 15, 'DisplayName', ['Final Position Vehicle ' num2str(drone_idx)]);
end
load('States_history/states_history_bot1-2.mat', 'States_history1')
load('States_history/states_history_bot2-2.mat', 'States_history2')
plot(States_history1(:,1),States_history1(:,2), '-g', 'LineWidth', 2, 'DisplayName', 'Vehicle 1')
plot(States_history2(:,1),States_history2(:,2), '-m', 'LineWidth', 2, 'DisplayName', 'Vehicle 2')
% Define the radii and road width
r_inner = 2;       % Inner circle radius (meters)
r_outer = 3.5;     % Outer circle radius (meters)
road_width = 1.5;  % Road width (meters)

% Create the circle for the roundabout
theta1 = linspace(0, 2*pi, 100);
theta2 = linspace(atan(road_width/2/r_outer), pi-atan(road_width/2/r_outer), 100);


% Inner and outer circle coordinates
x_inner = r_inner * cos(theta1);
y_inner = r_inner * sin(theta1);
x_outer1 = r_outer * cos(theta2);
y_outer1 = r_outer * sin(theta2);
x_outer2 = r_outer * cos(-theta2);
y_outer2 = r_outer * sin(-theta2);

% Plot the inner and outer circles
% fill(x_inner, y_inner, 'w', 'EdgeColor', 'k');  % Inner circle
% fill(x_outer, y_outer, [], 'EdgeColor', 'k');  % Outer circle
plot(x_inner,y_inner, 'k', 'LineWidth', 2, 'HandleVisibility', 'off')
plot(x_outer1, y_outer1, 'k', 'LineWidth', 2, 'HandleVisibility', 'off')
plot(x_outer2, y_outer2, 'k', 'LineWidth', 2, 'HandleVisibility', 'off')


% Define the roads leading out of the roundabout
road_length = 3.5;  % Length of the road segments

% Road 1 (horizontal)
x_road1 = [r_outer-0.1, r_outer + road_length];
y_road1_upper = [road_width/2, road_width/2];
y_road1_lower = [-road_width/2, -road_width/2];
plot(x_road1, y_road1_upper, 'k', 'LineWidth', 2, 'HandleVisibility', 'off');
plot(x_road1, y_road1_lower, 'k', 'LineWidth', 2, 'HandleVisibility', 'off');

plot(-x_road1, y_road1_upper, 'k', 'LineWidth', 2, 'HandleVisibility', 'off');
plot(-x_road1, y_road1_lower, 'k', 'LineWidth', 2, 'HandleVisibility', 'off');

% Add labels and legend
xlabel('X Position');
ylabel('Y Position');
% title('Trajectories of Vehicles');
legend('show');
grid on;
hold off;





